const VERSION = "2.0.0";

const assets = [
  "/",
  "/offline.html",
  "/manifest.webmanifest",
  "/assets/icons/add.svg",
  "/assets/icons/bag.svg",
  "/assets/icons/camera.svg",
  "/assets/icons/caret-down.svg",
  "/assets/icons/check.svg",
  "/assets/icons/close.svg",
  "/assets/icons/coins.svg",
  "/assets/icons/credit-coins.svg",
  "/assets/icons/cross.svg",
  "/assets/icons/download.svg",
  "/assets/icons/filter.svg",
  "/assets/icons/free-plan.svg",
  "/assets/icons/home.svg",
  "/assets/icons/image.svg",
  "/assets/icons/menu.svg",
  "/assets/icons/photo.svg",
  "/assets/icons/profile.svg",
  "/assets/icons/scan.svg",
  "/assets/icons/search.svg",
  "/assets/icons/spinner.svg",
  "/assets/icons/stars.svg",
  "/assets/images/1.jpg",
  "/assets/images/2.jpg",
  "/assets/images/3.jpg",
  "/assets/images/4.jpg",
  "/assets/images/5.jpg",
  "/assets/images/og-poster.jpg",
  "/assets/images/d1.png",
  "/assets/images/d2.png",
  "/assets/images/d3.png",
  "/assets/images/icon-192.png",
  "/assets/images/icon-512.png",
  "/assets/images/icon-maskable-192.png",
  "/assets/images/icon-maskable-512.png",
  "/assets/images/background.webp",
  "/assets/images/banner-bg.webp",
  "/assets/images/gradient-bg.svg",
  "/assets/images/logo-icon.svg",
  "/assets/images/logo-text.svg",
];

const assetsCacheName = "design-wave" + VERSION;

self.addEventListener("install", (event) => {
  event.waitUntil(
    (async () => {
      const cache = await caches.open(assetsCacheName);
      await Promise.allSettled(assets.map((url) => cache.add(url)));

      self.skipWaiting();
    })()
  );
});

self.addEventListener("activate", (event) => {
  event.waitUntil(
    (async () => {
      // Remove old caches (assets)
      const keys = await caches.keys();
      await Promise.allSettled(
        keys
          .filter((key) => key !== assetsCacheName)
          .map((key) => caches.delete(key))
      );
      await self.clients.claim();
    })()
  );
});

self.addEventListener("message", (event) => {
  // We want to cache missing assets (if there is any) whenever user loads our app.
  if (event.data?.type === "CACHE-MISSING-ASSETS") {
    (async () => {
      try {
        const cache = await caches.open(assetsCacheName);
        const matches = await Promise.all(
          assets.map((asset) => cache.match(asset))
        );

        const missingAssets = assets.filter((_, i) => !matches[i]);

        if (missingAssets.length) {
          await Promise.allSettled(missingAssets.map((url) => cache.add(url)));
        }
      } catch (err) {
        console.error("Error caching missing assets:", err);
      }
    })();
  }
});

self.addEventListener("fetch", (event) => {
  // we don't want to cache any method beside GET...
  if (event.request.method !== "GET") {
    event.respondWith(networkOnly(event.request));
    return;
  }

  const eventUrl = new URL(event.request.url);

  // Next.js related things... (i don't even know what they are, i just know they ruin my app)
  if (eventUrl.searchParams.has("_rsc")) {
    event.respondWith(networkOnly(event.request));
    return;
  }

  // HTML files, if the requested page is in the cache we respond with it, if not, we respond with the offline page...
  if (
    event.request.mode === "navigate" ||
    event.request.headers.get("accept")?.includes("text/html")
  ) {
    if (eventUrl.pathname === "/") {
      event.respondWith(
        cacheOnly(event.request, assetsCacheName, /*returnOffline= */ true)
      );
      return;
    }

    if (eventUrl.pathname === "/feed") {
      event.respondWith(
        staleWhileRevalidate(
          event.request,
          assetsCacheName,
          /*returnOffline= */ true
        )
      );
      return;
    }

    // only caching /transformations/[id] pages.
    if (/^\/transformations\/[a-zA-Z0-9]+$/.test(eventUrl.pathname)) {
      event.respondWith(
        staleWhileRevalidate(
          event.request,
          assetsCacheName,
          /*returnOffline=*/ true
        )
      );
      return;
    }

    event.respondWith(
      networkOnly(event.request, null, /*returnOffline= */ true)
    );
    return;
  }

  // static files
  if (eventUrl.host === self.location.host) {
    // static files generated by Next.js
    // (Fonts)
    if (eventUrl.pathname.startsWith("/_next/static/media")) {
      event.respondWith(cacheOnly(event.request, assetsCacheName));
      return;
    }

    // (CSS, JS)
    if (eventUrl.pathname.startsWith("/_next/static")) {
      event.respondWith(staleWhileRevalidate(event.request, assetsCacheName));
      return;
    }

    // images generated by Next.js
    if (eventUrl.pathname.startsWith("/_next/image")) {
      event.respondWith(cacheOnly(event.request, assetsCacheName));
      return;
    }

    // cached files in assets
    if (assets.includes(eventUrl.pathname)) {
      event.respondWith(cacheOnly(event.request, assetsCacheName));
      return;
    }
  }

  // other requests...
  event.respondWith(networkOnly(event.request));
});

async function cacheOnly(req, cacheName, returnOffline = false) {
  const cache = await caches.open(cacheName);
  const cachedResponse = await cache.match(req);

  if (cachedResponse) {
    return cachedResponse.clone();
  }

  return networkOnly(req, cache, returnOffline);
}

async function staleWhileRevalidate(req, cacheName, returnOffline = false) {
  const cache = await caches.open(cacheName);
  const cachedResponse = await cache.match(req);
  const fetchRes = await networkOnly(req, cache, returnOffline);

  return cachedResponse || fetchRes;
}

async function networkOnly(req, cache = null, returnOffline = false) {
  return fetch(req)
    .then(async (networkRes) => {
      if (cache && networkRes.ok) await cache.put(req, networkRes.clone());
      return networkRes;
    })
    .catch(async () => {
      const errMsg =
        "Network error and no cached data available. see the browser's console for more information";
      let errResponse = errMsg;

      if (returnOffline) {
        const assetsCache = await caches.open(assetsCacheName);
        const offlinePage = await assetsCache.match("/offline.html");

        if (offlinePage) return offlinePage;

        // if we couldn't find the offline.html, we return a simple html page.
        errResponse = `<!DOCTYPE html><html lang="en"><head><meta name="color-scheme"content="only light"/><meta name="viewport"content="width=device-width,initial-scale=1,maximum-scale=5,viewport-fit=cover"/><title>Network error and no cached data</title></head><body style='background:white;display:flex;justify-content:center;align-items:center;padding-block:1rem;font-family:Arial,Helvetica,sans-serif;'><h1 style='color:#020817;'>${errMsg}</h1></body></html>`;
      }

      return new Response(errResponse, {
        status: 503,
        statusText: "Service Unavailable.",
        headers: { "Content-Type": returnOffline ? "text/html" : "text/plain" },
      });
    });
}
